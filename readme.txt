1. Назначение приложения:
1.1. Данное приложение "Chicken" предназначено для управления интернет-магазином по продаже куриного мяса.
1.2. Пользователями приложения могут быть:
      Покупатели - могут просматривать разделы, продукты и описание.
      Менеджеры - следят за товаром, добавляют товары и описание, разделы, общаются с покупателем.
      Администраторы - имеют доступ к вышеперечисленному + доступ к аккауниам и возможность их редактировать.

2. Основной функционал:
2.1. Регистрация и аутентификация пользователей, выставление ролей(доступно admin), Admin пишется мануально.
2.2. Просмотр списка продуктов, добавление и удаление продуктов из корзины.
2.3. Наличие истории заказов в аккаунте. 
2.4. Пересчёт стоимости происходит во всех частях приложения. Т.к. товары под заказ, регистрировать наличие не требуется.
2.5. Оформление заказа с указанием адреса доставки(по дефолту в строке берётся адресс из указанного при регистрации) и способа оплаты(наличные, онлайн, безнал при получении).

3. Доменная модель:
3.1. Сущности:
3.1.1. Пользователь (Long id, String username, String password, role)
3.1.2. Продукт (id, название, описание, цена, изображение)
3.1.3. Заказ (id, пользователь, список продуктов, статус заказа)
3.2. Бизнес-правила:
3.2.1. Пользователь с ролью "покупатель" может просматривать и оформлять заказы.
3.2.2. Пользователь с ролью "администратор" имеет доступ к управлению продуктами и заказами.
3.3. Сервисы:
3.3.1. UserService - сервис для работы с пользователями (регистрация, аутентификация).
3.3.2. ProductService - сервис для работы с продуктами (добавление, удаление, получение списка).
3.3.3. OrderService - сервис для работы с заказами (оформление, получение списка заказов).
3.4. Опционально: ScheduledService - сервис для выполнения задач по расписанию (например, отправка уведомлений).

4. Хранение данных:
4.1. База данных: реляционная (MySQL).
4.2. Репозитории:
4.2.1. UserRepository - для работы с сущностью "Пользователь".
4.2.2. ProductRepository - для работы с сущностью "Продукт".
4.2.3. OrderRepository - для работы с сущностью "Заказ".

5. Обмен данными с пользователем:
5.1. REST API:
5.1.1. DTO:
5.1.1.1. UserDTO - для передачи данных о пользователе.
5.1.1.2. ProductDTO - для передачи данных о продукте.
5.1.1.3. OrderDTO - для передачи данных о заказе.
5.1.2. Контроллеры и их эндпоинты:
5.1.2.1. UserController - для обработки запросов, связанных с пользователями.
5.1.2.2. ProductController - для обработки запросов, связанных с продуктами.
5.1.2.3. OrderController - для обработки запросов, связанных с заказами.

6. Безопасность:
6.1. Способ аутентификации: использование JWT-токенов.
6.2. Роли и эндпоинты: различные эндпоинты доступны разным ролям пользователей.
6.3. Опционально: управление сессией с помощью Spring Session.

7. Интеграции со сторонними сервисами:
7.1. Назначение интеграции: интеграция с платежной системой для обработки платежей.
7.2. Краткое описание API: используется API платежной системы для проведения транзакций.
7.3. Регистрация и аутентификация: приложение авторизуется в платежной системе с помощью учетных данных.

8. Поверка качества кода:
8.1. Unit-тесты: написание тестов для сервисов, репозиториев и мапперов.
8.2. Интеграционные тесты: проверка корректной работы контроллеров и репозиториев.
8.3. Code-review: взаимная проверка кода членами команды разработки.

9. Развёртывание:
9.1. Для развертывания приложения на сервере необходимо наличие JDK, MySQL и Apache Tomcat.
9.2. Опционально: миграция данных - наполнение базы данных начальными данными перед развертыванием приложения.

10. Документирование:
10.1. Документирование кода: комментарии к методам и классам для лучшего понимания.
10.2. Документирование API: описание эндпоинтов и форматов запросов и ответов.

11. Будущее развитие проекта:
11.1. Расширение функционала: добавление новых возможностей, таких как система скидок или уведомлений.
11.2. Оптимизация производительности: улучшение работы приложения для обеспечения максимальной производительности.
11.3. Улучшение пользовательского интерфейса: доработка интерфейса для повышения удобства использования.

12. Стек технологий:
12.1. Java 17
12.2. Spring Boot 3.3.0-M1
12.3. MySQL 8.0
12.4. Spring Security
12.5. MapStruct // todo
12.6. JWT
12.7. Maven
12.8. JUnit
12.9. Spring Data JPA
